BINARY TREE

#include <iostream>
using namespace std;
struct Node {
    int data;
     Node*left;
    Node*right;
    Node(int val){
        data = val;
        left=right=nullptr;
    }
};

 Node* insert(Node*root,int arr[],int i,int n){
        if(i<n){
            Node*temp = new Node(arr[i]);
            root = temp;
            root->left = insert(root->left,arr,2*i+1,n);
            root->right = insert(root->right,arr,2*i+2,n);
        }
        return root;
    }
    
    void inorder(Node* root){
        if(root){
            inorder(root->left);
            cout<<root->data<<" ";
            inorder(root->right);
        }
    }

int main(){
    int n;
    cout<<"enter no of nodes: ";
    cin>>n;
    int*arr = new int[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
     Node * root = nullptr;
    root = insert(root, arr, 0, n);
    cout<<endl;
    inorder(root);
}

OUTPUT:-
enter no of nodes: 7
10
50
2
30
9
20
5

30 50 9 10 20 2 5 

binary Search tree

#include <iostream>
using namespace std;
struct Node {
    int data;
     Node*left;
    Node*right;
    Node(int val){
        data = val;
        left=right=nullptr;
    }
};
  Node*insert(Node*root, int val){
        if(root == nullptr){
            return new Node(val);
        }
        else if(val<root->data){
            root->left = insert(root->left,val);
        }
        else if(val>root->data){
            root->right = insert(root->right,val);
        }
        return root;
  }
    void inorder(Node* root){
        if(root){
            inorder(root->left);
            cout<<root->data<<" ";
        inorder(root->right);
        }
    }

int main(){
    int n;
    cout<<"enter no of nodes: ";
    cin>>n;
    int*arr = new int[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
     Node* root = nullptr;
    for(int i=0;i<n;i++){
    root=insert(root,arr[i]);
    }
    cout<<endl;
    inorder(root);
}

output:-
enter no of nodes: 7
10
2
4
9
50
30
40

2 4 9 10 30 40 50 
